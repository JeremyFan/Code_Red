<!DOCTYPE html>
<head>
<meta charset='utf-8' />
<title>组合使用构造函数模式和原型模式</title>
</head>
<body>
	<p style="margin:30px;width:600px;line-height:1.7;text-indent:2em;font-size:14px;font-family:microsoft yahei;">
		创建自定义类型的最常见方式，就是组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参数。可谓是集两种模式之长。
	</p>
	<script>
	function Person(name,age,job){
		this.name=name;
		this.age=age;
		this.job=job;
		this.friends=['John','James'];
	}
	Person.prototype={
		constructor:Person,
		sayName:function(){
			console.log(this.name);
		}
	}
	var p1=new Person('Jeremy',25,'Engineer');
	var p2=new Person('John Brown',23,'Rock Star');
	p1.friends.push('Jack');
	console.log(p1.friends); // ["John", "James", "Jack"] 
	console.log(p2.friends); // ["John", "James"] 
	p1.sayName(); // Jeremy 
	p2.sayName(); // John Brown 
	console.log(p1.sayName===p2.sayName); // true 

	</script>
</body>