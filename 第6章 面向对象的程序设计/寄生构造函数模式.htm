<!DOCTYPE html>
<head>
	<meta charset='utf-8' />
	<title>寄生构造函数模式</title>
</head>
<body>
	<p>
		寄生（parasitic）构造函数模式的基本思想是创建爱你一个函数，改函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象。除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实是一模一样的。
	</p>
	<script>
	function Person(name,age,job){
		var o=new Object();
		o.name=name;
		o.age=age;
		o.job=job;
		o.sayHello=function(){
			return this.name;
		}
		return o;
	}
	var p1=new Person('Jeremy',25,'Engineer');
	console.log(p1); // Object对象

	// 这个模式可以在特殊的情况下用来为对象创建构造函数。假设我们想创建一个具有额外方法的特殊数组。由于不能直接修改Array构造函数，因此可以使用这个模式。
	function SpecialArray(){
		// 创建数组
		var values=new Array();
		// 添加值
		values.push.apply(values,arguments);
		// 添加方法
		values.toPipedString=function(){
			return this.join('|');
		};
		// 返回数组
		return values;
	}
	var colors=new SpecialArray('Green','Yellow','Red');
	console.log(colors.toPipedString()); // Green|Yellow|Red

	</script>
</body>