<!DOCTYPE html>
<head>
<meta charset='utf-8' />
<title>属性类型：数据类型和访问器类型</title>
</head>
<body>
	<script>
	console.log('-----数据属性-----')

	var person1={};
	Object.defineProperty(person1,'name',{
		// 定义name属性不可写
		writable:false,
		value:'Jeremy'
	});
	console.log(person1.name); // Jeremy
	person1.name='John';
	console.log(person1.name); // Jeremy

	Object.defineProperty(person1,'job',{
		// 定义job属性不通过for-in循环返回属性
		enumerable:true,
		value:'Software Engineer'
	});
	console.log(person1.job); // Software Engineer

	// 在defineProperty()方法中enmerable属性的默认值为false（writable和configurable的默认值也是false）
	// 如果使用创建对象添加属性或者字面量语法创建对象，默认为true
	// 所以这里for-in循环只输出job属性
	for(var i in person1){
		console.log(person1[i]);
	} // SoftWare Engineer

		Object.defineProperty(person1,'age',{
		// 定义age属性不可配置
		configurable:false,
		value:'25'
	});
	console.log(person1.age); // 25
	person1.age='52';
	console.log(person1.age); // 25

	/*
	// 抛出错误：无法重新定义不可配置的属性“age”
	Object.defineProperty(person1,'age',{
		configurable:true,
		value:'52'
	});
	*/

	console.log('-----访问器属性-----');

	var book={
		_year:2004,
		edition:1
	};

	// 定义访问器属性
	Object.defineProperty(book, 'year', {
		get: function() {
			return this._year;
		},
		set: function(newValue) {
			this._year = newValue;
			// 感觉这地方是不是不合理，这版本更新的也太快了，而且还累加
			this.edition += newValue - 2004;
		}
	});
	book.year=2005;
	console.log(book._year,book.edition); // 2005 2

	// 以上的方法IE9+，FireFox4+，Safari5+和Chrome支持
	// 定义访问器属性的旧有方法
	var year={
		_value:2013,
		isLeapYear:false
	}
	year.__defineGetter__('value',function(){
		return this._value;
	});
	year.__defineSetter__('value',function(newValue){
		this._value=newValue;
		this.isLeapYear=newValue%400==0||(newValue%400!=0&&newValue%4==0)?true:false;
	});
	year.value=2012;
	console.log(year._value,year.isLeapYear); // 2012 true
	year.value=2400;
	console.log(year._value,year.isLeapYear); // 2400 true
	year.value=3333;
	console.log(year._value,year.isLeapYear); // 3333 false


	// defineProperties()方法，同时定义多个对象属性
	var book2={};
	Object.defineProperties(book2,{
		_year:{
			writable:true,
			value:2004
		},
		edition:{
			writable:true,
			value:1
		},
		year:{
			get:function(){
				return this._year;
			},
			set:function(newValue){
				this._year=newValue;
				if(newValue>2004){
					this.edition+=newValue-2004;
				}
			}
		}
	});

	book2.year=2013;
	console.log(book2._year,book2.edition);

	// 关于defineProperties()方法，书中的demo有问题，因为书中没有给_year和edition两个属性定义writable属性。这样访问器属性year不能修改_year和edition属性。


	// getOwnPropertyDescriptor()方法，读取属性的特性
	var descriptor=Object.getOwnPropertyDescriptor(book2,'_year');
	console.log(descriptor.value,descriptor.writable,descriptor.configurable,descriptor.enumerable); // 2013 true false false
	</script>
</body>