<!DOCTYPE html>
<head>
	<meta charset="utf-8">
	<title>原型链</title>
</head>
<body>
	<p>
	构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。	
	</p>
	<p>
	JavaScript主要依靠原型链继承。即让一个原型指一个实例，而这个实例的原型又指向另一个实例。这样构成原型链的链条。
	</p>
	<p>
	原型链的问题：问题1——在通过原型来实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章的变成了现在的类型了；问题2：创建子类型实例时，无法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。
	</p>
	<script>
	function SuperType(){
		this.property=true;
	}
	SuperType.prototype.getSuperValue=function(){
		return this.property;
	}

	function SubType(){
		this.subProperty=false;
	}
	SubType.prototype=new SuperType();
	SubType.prototype.getSubValue=function(){
		return this.property;
	}
	var ins=new SubType();
	console.log(ins.getSuperValue()); // true

	// 确定原型和实例的关系
	// 1.可以使用instanceof操作符
	console.log(ins instanceof Object); // true
	console.log(ins instanceof SuperType); // true
	console.log(ins instanceof SubType); // true

	// 2.可以使用isPrototypeOf()方法
	console.log(Object.prototype.isPrototypeOf(ins)); // true
	console.log(SuperType.prototype.isPrototypeOf(ins)); // true
	console.log(SubType.prototype.isPrototypeOf(ins)); // true


	// 给原型添加方法的代码一定要放在替换原型的语句之后
	// SubType重写SuperType中getSuperValue()方法
	SubType.prototype.getSuperValue=function(){
		return false;
	}
	console.log(ins.getSuperValue()); // false
	var sins=new SuperType();
	console.log(sins.getSuperValue()); // true


	// 注意不要使用对象字面量创建原型方法，因为这样会重写原型链。

	function SubSubType(){
		this.subsubProperty='subsub';
	};
	SubSubType.prototype=new SubType();
	// 重写原型，切断了原型链
	SubSubType.prototype={
		getSubSubValue:function(){
			return this.subsubProperty;
		}
	}
	var subsubins=new SubSubType();
	// 报错
	/*
	console.log(subsubins.getSubValue()); // Uncaught TypeError: Object #<Object> has no method 'getSubValue'
	*/

	// 原型链的问题
	// 问题1：在通过原型来实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章的变成了现在的类型了。
	function SType(){
		this.colors=['yellow','green','red'];
	}
	function SubSType(){}
	SubSType.prototype=new SType();
	var s1=new SubSType();
	var s2=new SubSType();
	console.log(s1.colors); // ["yellow", "green", "red"] 
	s1.colors.push('orange');
	console.log(s2.colors); // ["yellow", "green", "red", "orange"] 

	// 问题2：创建子类型实例时，无法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。

	</script>
</body>