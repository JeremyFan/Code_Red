<!DOCTYPE html>
<head>
	<meta charset="utf-8">
	<title>继承_组合继承</title>
</head>
<body>
	<p>
		组合继承（combination inheritance），有时候也叫做伪经典继承，指的是将原型链和借用构造函数技术组合到一块，从而发挥二者之长的一种继承模式。
		其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，即通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。
	</p>
	<script>
	// 父类
	function SuperType(name){
		this.name=name;
		this.colors=['yellow','green','red'];
	}
	// 父类原型
	SuperType.prototype.sayName=function(){
		console.log(this.name);
	}

	// 子类
	function SubType(name,age){
		SuperType.call(this,name);
		this.age=age;
	}
	// 原型继承
	SubType.prototype=new SuperType();
	// 定义子类方法
	SubType.prototype.sayAge=function(){
		console.log(this.age);
	}

	var s1=new SubType('Jermey',25);
	console.log(s1.colors); // ["yellow", "green", "red"] 
	s1.sayName(); // Jermey 
	s1.sayAge(); // 25

	var s2=new SubType('Billie',39);
	console.log(s2.colors); // ["yellow", "green", "red"]
	s2.sayName(); // Billie
	s2.sayAge(); //39
	</script>
</body>